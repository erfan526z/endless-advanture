#include "ChunkGenerator.h"
#include <cstring>
#include <iostream> // tmp

FastNoiseLite noisegens[16];

// Tree Types & General Variables 

constexpr int TREE_SPRUCE = 0;
constexpr int TREE_PINE = 1;
constexpr int TREE_DWARF_BIRCH = 2;
constexpr int TREE_MAPLE = 3;
constexpr int TREE_BIRCH = 4;
constexpr int TREE_ACACIA = 5;
constexpr int TREE_JUNGLE = 6;

constexpr int MODEL_WIDTH = 9;
constexpr int MODEL_HEIGHT = 12;
constexpr int MODEL_SIZE = MODEL_WIDTH * MODEL_WIDTH * MODEL_HEIGHT;

// Tree Generation Models

constexpr int _WOOD = 1;
constexpr int _LEAF = 2;
constexpr int _NULL = 0;

const int ConeTreeModel1[MODEL_SIZE] = {
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _WOOD, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _WOOD, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL
};

const int DwarfTreeModel1[MODEL_SIZE] = {
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _WOOD, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL
};

const int DwarfTreeModel2[MODEL_SIZE] = {
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _WOOD, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL
};

const int DwarfTreeModel3[MODEL_SIZE] = {
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _WOOD, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _WOOD, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL
};

const int DeciduousTreeModel1[MODEL_SIZE] = {
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _WOOD, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL
};

const int DeciduousTreeModel2[MODEL_SIZE] = {
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _WOOD, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _WOOD, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _WOOD, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _LEAF, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL
};

const int AcaciaTreeModel1[MODEL_SIZE] = {
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL
};

const int TropicalTreeModel1[MODEL_SIZE] = {
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL
};

const int TropicalTreeModel2[MODEL_SIZE] = {
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _WOOD, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _WOOD, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _LEAF, _LEAF, _LEAF, _LEAF, _LEAF, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _LEAF, _LEAF, _LEAF, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,
	_NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL, _NULL,

};

//

//

double _mapTemperature(double t) {
	t = (t + 1.0) / 2.0;

	if (t < 0.3)
		return 60.0 * t - 25.0; // -25 to -7
	else if (t < 0.4)
		return 100.0 * t - 37.0; // -7 to 3
	else if (t < 0.5)
		return 90.0 * t - 33.0; // 3 to 12
	else if (t < 0.6)
		return 80.0 * t - 28.0; // 12 to 20
	else if (t < 0.7)
		return 80.0 * t - 28.0; // 20 to 28
	else
		return 23.34 * t + 11.662; // 28 to 35
}

double _mapRainfall(double t) {
	t = (t + 1.0) / 2.0;

	if (t < 0.3)
		return 1000.0 * t - 0.0; // 0 ~ 300
	else if (t < 0.4)
		return 4500.0 * t - 1050.0; // 300 ~ 750
	else if (t < 0.5)
		return 4500.0 * t - 1050.0; // 750 ~ 1200
	else if (t < 0.6)
		return 6000.0 * t - 1800.0; // 1200 ~ 1800
	else if (t < 0.7)
		return 9000.0 * t - 3600.0; // 1800 to 2700
	else
		return 5000.0 * t - 800.0; // 2700 to 4200
}

unsigned short int _getSoil(float temp, float rain, float randf1, float randf2, int layer) {
	// Layer 0: layer at surface
	
	// A bit of randomness
	temp += (randf1 * 2.0f);
	rain += (randf2 * 80.0f);

	if (temp < -15.0f) { // Tundra
		return gamedata::blocks.tundra_soil.getID();
	}
	else if (temp < 5.0f) { // Taiga
		return gamedata::blocks.taiga_soil.getID();
	}
	else if (temp < 20.0f && rain < 400.0f) { // Chaparral
		return gamedata::blocks.chaparral_soil.getID();
	}
	else if (temp < 20.0f && rain < 800.0f) { // Grassland
		return gamedata::blocks.grassland_soil.getID();
	}
	else if (temp < 20.0f) { // Deciduous Forest
		return gamedata::blocks.deciduous_forest_soil.getID();
	}
	else if (temp < 30.0f && rain < 200.0f) { // Desert
		return gamedata::blocks.dessert_soil.getID();
	}
	else if (temp < 30.0f && rain < 1800.0f) { // Savanna
		return gamedata::blocks.savanna_soil.getID();
	}
	else if (temp < 30.0f) { // Tropical Forest
		return gamedata::blocks.tropical_soil.getID();
	}
	else if (temp < 40.0f && rain < 400.0f) { // Desert
		return gamedata::blocks.dessert_soil.getID();
	}
	else if (temp < 40.0f && rain < 2600.0f) { // Savanna
		return gamedata::blocks.savanna_soil.getID();
	}
	else { // Tropical, but hotter :)
		return gamedata::blocks.tropical_soil.getID();
	}


	return (layer == 0) ? gamedata::blocks.grass.getID() : gamedata::blocks.dirt.getID();
}

int _getLandHeight(const FastNoiseLite& fnsharp, const FastNoiseLite& fnsmooth, const float& factor, const int& x, const int& z, const int& base) {
	return 130 + base + (int)((factor) * (72.0 * fnsharp.GetNoise((double)x, (double)z)) + (1.0 - factor) * (72.0 * fnsmooth.GetNoise((double)x, (double)z)));
}

void setNoiseGenerators(FastNoiseLite ngns[16])
{
	for(int i = 0; i < 16; i++)
		noisegens[i] = ngns[i];
}

void putTree(unsigned short int* data, int size, int height, int tree_x, int tree_y, int tree_z, int tree_type, int randd, int day_of_year)
{
	auto val = [](int num) { return num < 0 ? -num : num; }; // Compact int abs(int) function
	auto in = [](int num, int begin, int end) { return num <= end && num >= begin; }; // range checking

	unsigned short int log_type;
	unsigned short int leaf_type;
	int lower_bound;
	int higher_bound;
	int temporary = 0;
	const int* model;

	switch (tree_type)
	{
	case TREE_SPRUCE:
		lower_bound = 120;
		higher_bound = 164;
		model = ConeTreeModel1;
		log_type = gamedata::blocks.spruce_log.getID();
		leaf_type = (day_of_year < 2 || day_of_year > 17) ? gamedata::blocks.spruce_leaves_frosty.getID() : gamedata::blocks.spruce_leaves.getID();
		break;
	case TREE_DWARF_BIRCH:
		temporary = (randd + 1) % 3;
		lower_bound = 113;
		higher_bound = 155;
		model = (!temporary) ? DwarfTreeModel1 : (temporary == 1) ? DwarfTreeModel2 : DwarfTreeModel3;
		log_type = gamedata::blocks.dwarf_birch_log.getID();
		leaf_type = (day_of_year < 2 || day_of_year > 17) ? gamedata::blocks.dwarf_birch_leaves_frosty.getID() : gamedata::blocks.dwarf_birch_leaves.getID();
		break;
	case TREE_PINE:
		lower_bound = 120;
		higher_bound = 164;
		model = ConeTreeModel1;
		log_type = gamedata::blocks.pine_log.getID();
		leaf_type = (day_of_year < 2 || day_of_year > 17) ? gamedata::blocks.pine_leaves_frosty.getID() : gamedata::blocks.pine_leaves.getID();
		break;
	case TREE_MAPLE:
		temporary = (randd + 1) % 3;
		lower_bound = 116;
		higher_bound = 164;
		model = DeciduousTreeModel2;
		log_type = gamedata::blocks.maple_log.getID();
		if(!temporary)
			leaf_type = (day_of_year < 2 || day_of_year > 20) ? gamedata::blocks.maple_leaves_winter_y.getID() :
			(day_of_year < 14) ? gamedata::blocks.maple_leaves_green_y.getID() : gamedata::blocks.maple_leaves_yellow.getID();
		else if (temporary == 1)
			leaf_type = (day_of_year < 2 || day_of_year > 20) ? gamedata::blocks.maple_leaves_winter_o.getID() :
			(day_of_year < 14) ? gamedata::blocks.maple_leaves_green_o.getID() : gamedata::blocks.maple_leaves_orange.getID();
		else
			leaf_type = (day_of_year < 2 || day_of_year > 20) ? gamedata::blocks.maple_leaves_winter_r.getID() :
			(day_of_year < 14) ? gamedata::blocks.maple_leaves_green_r.getID() : gamedata::blocks.maple_leaves_red.getID();
		break;
	case TREE_BIRCH:
		temporary = (randd + 1) % 3;
		lower_bound = 116;
		higher_bound = 164;
		model = DeciduousTreeModel1;
		log_type = gamedata::blocks.birch_log.getID();
		if (!temporary)
			leaf_type = (day_of_year < 2 || day_of_year > 20) ? gamedata::blocks.birch_leaves_winter_y.getID() :
			(day_of_year < 14) ? gamedata::blocks.birch_leaves_green_y.getID() : gamedata::blocks.birch_leaves_yellow.getID();
		else if (temporary == 1)
			leaf_type = (day_of_year < 2 || day_of_year > 20) ? gamedata::blocks.birch_leaves_winter_o.getID() :
			(day_of_year < 14) ? gamedata::blocks.birch_leaves_green_o.getID() : gamedata::blocks.birch_leaves_orange.getID();
		else
			leaf_type = (day_of_year < 2 || day_of_year > 20) ? gamedata::blocks.birch_leaves_winter_r.getID() :
			(day_of_year < 14) ? gamedata::blocks.birch_leaves_green_r.getID() : gamedata::blocks.birch_leaves_red.getID();
		break;
	case TREE_ACACIA:
		lower_bound = 113;
		higher_bound = 200;
		model = AcaciaTreeModel1;
		log_type = gamedata::blocks.acacia_log.getID();
		leaf_type = gamedata::blocks.acacia_leaves.getID();
		break;
	case TREE_JUNGLE:
		lower_bound = 113;
		higher_bound = 200;
		model = (randd % 2) ? TropicalTreeModel1 : TropicalTreeModel2;
		log_type = gamedata::blocks.jungle_log.getID();
		leaf_type = gamedata::blocks.jungle_leaves.getID();
		break;
	default:
		return;
	}

	if (in(tree_y, lower_bound, higher_bound)) {
		for (int lx = -3; lx <= 3; lx++) {
			if (lx + tree_x < 0 || lx + tree_x >= size) continue;
			int chunk_x_index = (lx + tree_x) * size;
			int model_x_index = (lx + 4) * MODEL_WIDTH;
			for (int lz = -3; lz <= 3; lz++) {
				if (lz + tree_z < 0 || lz + tree_z >= size) continue;
				int chunk_z_index = lz + tree_z;
				int model_z_index = (lz + 4);
				for (int ly = 0; ly < 12; ly++) {
					if (ly + tree_y < 0 || ly + tree_y >= height) continue;
					int chunk_y_index = (ly + tree_y) * size * size;
					int idx = chunk_x_index + chunk_y_index + chunk_z_index;
					int block = model[model_x_index + model_z_index + ly * MODEL_WIDTH * MODEL_WIDTH];
					data[idx] = block == _WOOD ? log_type : block == _LEAF ? leaf_type : data[idx];
				}
			}
		}
	}
}

unsigned short int getBushOrGrass(float rand, float rand_large, float misc_rand1, float misc_rand2, float temp, float rain, int day_of_year) {
	unsigned short int dblock = gamedata::blocks.air.getID();
	if (temp < -15.0f) {
		if (misc_rand2 < 0.0f) return dblock;
		if (misc_rand1 < 0.0f) {
			return (rand > -0.5f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.lichen_frosty.getID() : gamedata::blocks.lichen.getID();
		}
		else {
			return (rand > 0.6f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.surface_moss_frosty.getID() : gamedata::blocks.surface_moss.getID();
		}
	}
	else if (temp < -5.0f) {
		if (misc_rand2 < -0.1f) return dblock;
		if (misc_rand1 < -0.6f) {
			return (rand > -0.5f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.lichen_frosty.getID() : gamedata::blocks.lichen.getID();
		}
		else if (misc_rand1 < -0.2f) {
			return (rand > -0.8f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.bearberry_bush_frozen.getID() : gamedata::blocks.bearberry_bush.getID();
		}
		else if (misc_rand1 < 0.2f) {
			return (rand > -0.2f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.tallgrass_dead.getID() : gamedata::blocks.tallgrass.getID();
		}
		else if (misc_rand1 < 0.6f) {
			return (rand > -0.8f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.dwarf_blueberry_bush_frozen.getID() : gamedata::blocks.dwarf_blueberry_bush.getID();
		}
		else {
			return (rand > -0.5f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.surface_moss_frosty.getID() : gamedata::blocks.surface_moss.getID();
		}
	}
	else if (temp < 5.0f) {
		if (misc_rand2 < -0.2f) return dblock;
		if (misc_rand1 < -0.6f) {
			return (rand > -0.8f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.bearberry_bush_frozen.getID() : gamedata::blocks.bearberry_bush.getID();
		}
		else if (misc_rand1 < -0.2f) {
			return (rand > -0.8f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.strawberry_bush_dead.getID() : gamedata::blocks.strawberry_bush_fruit.getID();
		}
		else if (misc_rand1 < 0.2f) {
			return (rand > -0.8f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.tallgrass_dead.getID() : gamedata::blocks.tallgrass.getID();
		}
		else if (misc_rand1 < 0.6f) {
			return dblock;
		}
		else {
			return (rand > -0.5f) ? dblock : (day_of_year < 7 || day_of_year > 16) ? gamedata::blocks.dwarf_blueberry_bush_frozen.getID() : gamedata::blocks.dwarf_blueberry_bush.getID();
		}
	}
	else if (temp < 20.0f && rain < 395.0f) {
		if (misc_rand1 < -0.875f) {
			return (rand > -0.3f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.strawberry_bush_dead.getID() : gamedata::blocks.strawberry_bush_fruit.getID();
		}
		else {
			if (rand > 0.55f || rand < -0.55f)
				return dblock;
			else if (rand > 0.0f)
				return (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.tallgrass_short_dead.getID() : gamedata::blocks.tallgrass_short.getID();
			else
				return (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.tallgrass_dead.getID() : gamedata::blocks.tallgrass.getID();
		}
	}
	else if (temp < 20.0f && rain < 795.0f) {
		if (misc_rand1 < -0.825f) {
			return (rand > -0.2f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.strawberry_bush_dead.getID() : gamedata::blocks.strawberry_bush_fruit.getID();
		}
		else if(misc_rand2 < 0.7f) {
			if (rand > 0.85f || rand < -0.85f)
				return dblock;
			else if (rand > 0.0f)
				return (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.tallgrass_short_dead.getID() : gamedata::blocks.tallgrass_short.getID();
			else
				return (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.tallgrass_dead.getID() : gamedata::blocks.tallgrass.getID();
		}
	}
	else if (temp < 20.0f) {
		if (misc_rand1 < -0.80f) {
			return (rand > -0.1f) ? dblock : (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.strawberry_bush_dead.getID() : gamedata::blocks.strawberry_bush_fruit.getID();
		}
		else if (misc_rand2 < 0.3f) {
			if (rand > 0.75f || rand < -0.75f)
				return dblock;
			else if (rand > 0.0f)
				return (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.tallgrass_short_dead.getID() : gamedata::blocks.tallgrass_short.getID();
			else
				return (day_of_year < 3 || day_of_year > 16) ? gamedata::blocks.tallgrass_dead.getID() : gamedata::blocks.tallgrass.getID();
		}
	}
	else {
		float rf_factor = rain / 4200.0f;
		rf_factor = rf_factor * 2.0f - 1.0f;
		if (rand > rf_factor) return dblock;

		if (misc_rand1 < -0.80f) {
			return gamedata::blocks.strawberry_bush_fruit.getID();
		}
		else if(misc_rand1 < 0.05f) {
			return gamedata::blocks.tallgrass_short.getID();
		}
		else {
			return gamedata::blocks.tallgrass.getID();
		}
	}
	return 0;
}

/*
The function which the world origins from!

noisegens indices:
0:  Temperature (General)
1:  Rainfall (General)
2:  Generation Noise (making it more natural)

7:  Low errosion terrain (sharper hills)
8:  High errosion terrain (smoother hiils)
9:  Base terrain height (determines the base altitude of a position)
10: Errosion factor

*/
void generateChunk(unsigned short int* data, int size, int height, int base_x, int base_z, ChunkTimeStamp cts)
{
	constexpr float min_rain = 0.0f;
	constexpr float max_rain = 4000.0f;
	constexpr float min_temp = -25.0f;
	constexpr float max_temp = 35.0f;

	constexpr float scl_temp = (max_temp - min_temp) / 2.0f;

	for (int x = 0; x < size; x++) {
		int indb = size * x;
		for (int z = 0; z < size; z++) {
			int sx = x + base_x;
			int sz = z + base_z;

			double sxd = (double)sx;
			double szd = (double)sz;
			
			float temp = _mapTemperature(noisegens[0].GetNoise(sxd, szd));
			float rain = _mapRainfall(noisegens[1].GetNoise(sxd, szd)) * ((temp - min_temp) / (2.0f * scl_temp));

			float randf1 = noisegens[2].GetNoise(sxd, 50.0, szd);
			float randf2 = noisegens[2].GetNoise(sxd, 700.0, szd);

			float rand_tf = noisegens[3].GetNoise(sxd, 646.0, szd);
			float rand_xf = noisegens[4].GetNoise(sxd, szd);

			float errosion_factor = (noisegens[10].GetNoise(sxd, szd) + 1.0f) / 2.0f;
			float position_base_height = 120.0f * noisegens[9].GetNoise(sxd, szd);
			errosion_factor = (errosion_factor + 1.0f) / 2.0f;
			int land_height = _getLandHeight(noisegens[7], noisegens[8], errosion_factor, sx, sz, (int)position_base_height);

			int soil_layer = 3;

			for (int y = 0; y < height; y++) {
				int inda = size * size * y;
				data[inda + indb + z] = 
					(y <= land_height - soil_layer) ? gamedata::blocks.stone.getID() :
					(y <= land_height) ? _getSoil(temp, rain, randf1, randf2, land_height - y) :
					(y >= gamedata::WATER_LEVEL && y == land_height + 1) ? getBushOrGrass(rand_tf, rand_xf, randf1, randf2, temp, rain, cts.day):
					(y < gamedata::WATER_LEVEL) ? gamedata::blocks.water.getID() :
					gamedata::blocks.air.getID();
			}
		}
	}

	for (int x = -5; x < size + 5; x++) {
		int indb = size * x;
		for (int z = -5; z < size + 5; z++) {
			int sx = x + base_x;
			int sz = z + base_z;

			double sxd = (double)sx;
			double szd = (double)sz;

			double ns1 = noisegens[3].GetNoise(sxd, szd);
			double ns2 = noisegens[3].GetNoise(sxd, 100.0, szd);

			int rndi1 = ((int)(ns1 * 10000.0)) % 31;
			int rndi2 = ((int)(ns2 * 10000.0)) % 31;

			if (rndi1 + rndi2 < 43) continue;

			float temp = _mapTemperature(noisegens[0].GetNoise(sxd, szd));
			float rain = _mapRainfall(noisegens[1].GetNoise(sxd, szd)) * ((temp - min_temp) / (2.0f * scl_temp));

			float errosion_factor = (noisegens[10].GetNoise(sxd, szd) + 1.0f) / 2.0f;
			float position_base_height = 120.0f * noisegens[9].GetNoise(sxd, szd);
			errosion_factor = (errosion_factor + 1.0f) / 2.0f;
			int land_height = _getLandHeight(noisegens[7], noisegens[8], errosion_factor, sx, sz, (int)position_base_height);

			float randnum = noisegens[4].GetNoise(sxd, szd);

			if (temp < -5.0f) {
				if (rndi1 + rndi2 > 47) continue;
				float rate = (temp + 16.0f) / 11.0f;
				if (rate < 0.0f) rate = 0.0f;
				float rainp = rain > 600.0f ? 600.0f : rain;
				rate *= (rainp / 600.0f);
				if(ns1 < rate)
					if(rndi1 % 2 == 0)
						putTree(data, size, height, x, land_height, z, TREE_SPRUCE, abs(rndi1 + rndi2), cts.day);
					else
						putTree(data, size, height, x, land_height, z, TREE_DWARF_BIRCH, abs(rndi1 + rndi2), cts.day);
			}
			else if (temp < 5.0f) {
				if (rndi1 + rndi2 < 47) continue;
				if (randnum > 0.0f)
					putTree(data, size, height, x, land_height, z, TREE_SPRUCE, abs(rndi1 + rndi2), cts.day);
				else
					putTree(data, size, height, x, land_height, z, TREE_PINE, abs(rndi1 + rndi2), cts.day);
			}
			else if (temp < 20.0f && rain < 395.0f) {
				if (rndi1 + rndi2 == 45 && (int)(randnum * 1000.0) % 71 == 0)
					putTree(data, size, height, x, land_height, z, TREE_MAPLE, abs(rndi1 + rndi2), cts.day);
				if (rndi1 + rndi2 == 46 && (int)(randnum * 1000.0) % 71 == 0)
					putTree(data, size, height, x, land_height, z, TREE_MAPLE, abs(rndi1 + rndi2), cts.day);
			}
			else if (temp < 20.0f && rain < 795.0f) {
				if (rndi1 + rndi2 == 45 && (int)(randnum * 100.0) % 11 == 0)
					putTree(data, size, height, x, land_height, z, TREE_MAPLE, abs(rndi1 + rndi2), cts.day);
				if (rndi1 + rndi2 == 46 && (int)(randnum * 100.0) % 11 == 0)
					putTree(data, size, height, x, land_height, z, TREE_MAPLE, abs(rndi1 + rndi2), cts.day);
			}
			else if (temp < 20.0f) {
				if (randnum > 0.5f)
					putTree(data, size, height, x, land_height, z, TREE_PINE, abs(rndi1 + rndi2), cts.day);
				else if (randnum > 0.0f)
					putTree(data, size, height, x, land_height, z, TREE_BIRCH, abs(rndi1 + rndi2), cts.day);
				else if (randnum > -0.5f)
					putTree(data, size, height, x, land_height, z, TREE_MAPLE, abs(rndi1 + rndi2), cts.day);
			}
			else if (rain > 500.0f && rain < 2000.0f) {
				if (rndi1 + rndi2 < 53) continue;
				putTree(data, size, height, x, land_height, z, TREE_ACACIA, abs(rndi1 + rndi2), cts.day);
			}
			else if(rain > 2000.0f) {
				putTree(data, size, height, x, land_height, z, TREE_JUNGLE, abs(rndi1 + rndi2), cts.day);
			}
			
		}
	}
}

void generateTickableChunkBlocks(std::vector<TickableBlock>* tickable_blocks, unsigned short int* data, int size, int height)
{
	for (int x = 0; x < size; x++) {
		int indb = size * x;
		for (int z = 0; z < size; z++) {
			for (int y = 0; y < height; y++) {
				int inda = size * size * y;
				if (gamedata::blocks.isTickable(data[inda + indb + z])) {
					TickableBlock tb;
					tb.block_id = data[inda + indb + z];
					ChunkTimeStamp cts;
					cts.year = -1; // means this is a new data
					tb.x = x;
					tb.y = y;
					tb.z = z;
					tb.last_update = cts;
					tb.stat1 = tb.stat2 = 0;
					tb.stat3 = tb.stat4 = 0;
					tb.stat5 = (float)(rand() % 400) + 800.0f;
					tickable_blocks->push_back(tb);
				}
			}
		}
	}
}

/*
This function is for debugging purpose and may not be used in final project
*/
int generateSingleBlock(int x, int y, int z, float& temp, float& rain) {
	constexpr float min_rain = 0.0f;
	constexpr float max_rain = 4000.0f;
	constexpr float min_temp = -25.0f;
	constexpr float max_temp = 35.0f;

	constexpr float avg_temp = (min_temp + max_temp) / 2.0f;
	constexpr float avg_rain = (min_rain + max_rain) / 2.0f;

	constexpr float scl_temp = (max_temp - min_temp) / 2.0f;
	constexpr float scl_rain = (max_rain - min_rain) / 2.0f;

	double sxd = (double)x; 
	double szd = (double)z;

	float errosion_factor = (noisegens[10].GetNoise(sxd, szd) + 1.0f) / 2.0f;
	float position_base_height = 120.0f * noisegens[9].GetNoise(sxd, szd);
	errosion_factor = (errosion_factor + 1.0f) / 2.0f;
	int land_height = _getLandHeight(noisegens[7], noisegens[8], errosion_factor, x, z, (int)position_base_height);

	temp = _mapTemperature(noisegens[0].GetNoise(sxd, szd));
	rain = _mapRainfall(noisegens[1].GetNoise(sxd, szd));
	rain *= ((temp - min_temp) / (2.0f * scl_temp));
	
	return land_height;
}

double getNoiseResult(int generator_idx, double x, double y, double z) {
	return noisegens[generator_idx].GetNoise(x, y, z);
}

double getNoiseResult(int generator_idx, double x, double z) {
	return noisegens[generator_idx].GetNoise(x, z);
}

FastNoiseLite& getNoiseGenerator(int idx)
{
	return noisegens[idx];
}


